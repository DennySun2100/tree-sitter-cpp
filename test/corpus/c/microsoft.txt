================================
Declaration specs
================================

struct __declspec(dllexport) s2
{
};

union __declspec(noinline) u2 {
};

---

(translation_unit
  (struct_declaration
    declarator: (struct_specifier
      (ms_declspec_modifier
        (identifier))
      name: (type_identifier)
      body: (field_declaration_list)))
  (union_declaration
    declarator: (union_specifier
      (ms_declspec_modifier
        (identifier))
      name: (type_identifier)
      body: (field_declaration_list))))

================================
Pointers
================================

struct s2
{
    int * __restrict x;
    int * __sptr psp;
    int * __uptr pup;
    int * __unaligned pup;
};

void sum2(int n, int * __restrict a, int * __restrict b,
          int * c, int * d) {
   int i;
   for (i = 0; i < n; i++) {
      a[i] = b[i] + c[i];
      c[i] = b[i] + d[i];
    }
}

void MyFunction(char * __uptr myValue);

int *base_for_pointer;

typedef int __based(base_for_pointer) * pBasedPtr;

---

(translation_unit
 (struct_declaration
    declarator: (struct_specifier
      name: (type_identifier)
      body: (field_declaration_list
        (field_declaration
          type: (primitive_type)
          declarator: (pointer_declarator
            (ms_pointer_modifier
              (ms_restrict_modifier))
            declarator: (field_identifier)))
        (field_declaration
          type: (primitive_type)
          declarator: (pointer_declarator
            (ms_pointer_modifier
              (ms_signed_ptr_modifier))
            declarator: (field_identifier)))
        (field_declaration
          type: (primitive_type)
          declarator: (pointer_declarator
            (ms_pointer_modifier
              (ms_unsigned_ptr_modifier))
            declarator: (field_identifier)))
        (field_declaration
          type: (primitive_type)
          declarator: (pointer_declarator
            (ms_pointer_modifier
              (ms_unaligned_ptr_modifier))
            declarator: (field_identifier))))))
  (function_definition
    type: (primitive_type)
    declarator: (function_declarator
      declarator: (identifier)
      parameters: (parameter_list
        (parameter_declaration
          type: (primitive_type)
          declarator: (identifier))
        (parameter_declaration
          type: (primitive_type)
          declarator: (pointer_declarator
            (ms_pointer_modifier
              (ms_restrict_modifier))
            declarator: (identifier)))
        (parameter_declaration
          type: (primitive_type)
          declarator: (pointer_declarator
            (ms_pointer_modifier
              (ms_restrict_modifier))
            declarator: (identifier)))
        (parameter_declaration
          type: (primitive_type)
          declarator: (pointer_declarator
            declarator: (identifier)))
        (parameter_declaration
          type: (primitive_type)
          declarator: (pointer_declarator
            declarator: (identifier)))))
    body: (compound_statement
      (declaration
        type: (primitive_type)
        declarator: (identifier))
      (for_statement
        initializer: (assignment_expression
          left: (identifier)
          right: (number_literal))
        condition: (binary_expression
          left: (identifier)
          right: (identifier))
        update: (update_expression
          argument: (identifier))
        body: (compound_statement
          (expression_statement
            expression: (assignment_expression
              left: (subscript_expression
                argument: (identifier)
                indices: (subscript_argument_list
                  argument: (identifier)))
              right: (binary_expression
                left: (subscript_expression
                  argument: (identifier)
                  indices: (subscript_argument_list
                    argument: (identifier)))
                right: (subscript_expression
                  argument: (identifier)
                  indices: (subscript_argument_list
                    argument: (identifier))))))
          (expression_statement
            expression: (assignment_expression
              left: (subscript_expression
                argument: (identifier)
                indices: (subscript_argument_list
                  argument: (identifier)))
              right: (binary_expression
                left: (subscript_expression
                  argument: (identifier)
                  indices: (subscript_argument_list
                    argument: (identifier)))
                right: (subscript_expression
                  argument: (identifier)
                  indices: (subscript_argument_list
                    argument: (identifier))))))))))
  (declaration
    type: (primitive_type)
    declarator: (function_declarator
      declarator: (identifier)
      parameters: (parameter_list
        (parameter_declaration
          type: (primitive_type)
          declarator: (pointer_declarator
            (ms_pointer_modifier
              (ms_unsigned_ptr_modifier))
            declarator: (identifier))))))
  (declaration
    type: (primitive_type)
    declarator: (pointer_declarator
      declarator: (identifier)))
  (type_definition
    type: (primitive_type)
    declarator: (pointer_declarator
      (ms_based_modifier
        (argument_list
          argument: (identifier)))
      declarator: (type_identifier))))


================================
Call modifiers
================================

__cdecl void mymethod(){
    return;
}

__fastcall void mymethod(){
    return;
}

__stdcall void mymethod(){
    return;
}

__thiscall void mymethod(){
    return;
}

__clrcall void mymethod(){
    return;
}

__vectorcall void mymethod(){
    return;
}

---

(translation_unit
  (function_definition
    (ms_call_modifier)
    type: (primitive_type)
    declarator: (function_declarator
      declarator: (identifier)
      parameters: (parameter_list))
    body: (compound_statement
      (return_statement)))
  (function_definition
    (ms_call_modifier)
    type: (primitive_type)
    declarator: (function_declarator
      declarator: (identifier)
      parameters: (parameter_list))
    body: (compound_statement
      (return_statement)))
  (function_definition
    (ms_call_modifier)
    type: (primitive_type)
    declarator: (function_declarator
      declarator: (identifier)
      parameters: (parameter_list))
    body: (compound_statement
      (return_statement)))
  (function_definition
    (ms_call_modifier)
    type: (primitive_type)
    declarator: (function_declarator
      declarator: (identifier)
      parameters: (parameter_list))
    body: (compound_statement
      (return_statement)))
  (function_definition
    (ms_call_modifier)
    type: (primitive_type)
    declarator: (function_declarator
      declarator: (identifier)
      parameters: (parameter_list))
    body: (compound_statement
      (return_statement)))
  (function_definition
    (ms_call_modifier)
    type: (primitive_type)
    declarator: (function_declarator
      declarator: (identifier)
      parameters: (parameter_list))
    body: (compound_statement
      (return_statement))))

================================
SEH exception handling
================================

int main() {
    int arg;
    __try {
        __try {
            arg = 1;
            __leave;
        } __except (-1) {
            arg = 2;
        }
        __leave;
        arg = 3;
    } __finally {
        printf("arg: %d\n", arg);
    }
}

---

(translation_unit
  (function_definition
    (primitive_type)
    (function_declarator
      (identifier)
      (parameter_list))
    (compound_statement
      (declaration
        (primitive_type)
        (identifier))
      (seh_try_statement
        (compound_statement
          (seh_try_statement
            (compound_statement
              (expression_statement
                (assignment_expression
                  (identifier)
                  (number_literal)))
              (seh_leave_statement))
            (seh_except_clause
              (parenthesized_expression
                (number_literal))
              (compound_statement
                (expression_statement
                  (assignment_expression
                    (identifier)
                    (number_literal))))))
          (seh_leave_statement)
          (expression_statement
            (assignment_expression
              (identifier)
              (number_literal))))
        (seh_finally_clause
          (compound_statement
            (expression_statement
              (call_expression
                (identifier)
                (argument_list
                  (string_literal
                    (string_content)
                    (escape_sequence))
                  (identifier))))))))))

=============================
Unicode strings and constants
=============================

char z = 't';
wchar_t a = L't';
char8_t b = u8't';
char16_t c = u't';
char32_t d = U't';
const wchar_t *f = L"text";
const char8_t *g = u8"text";
const char16_t *h = u"text";
const char32_t *i = U"text";

---

(translation_unit
  (declaration
    (primitive_type)
    (init_declarator
      (identifier)
      (char_literal
        (character))))
  (declaration
    (type_identifier)
    (init_declarator
      (identifier)
      (char_literal
        (character))))
  (declaration
    (primitive_type)
    (init_declarator
      (identifier)
      (char_literal
        (character))))
  (declaration
    (primitive_type)
    (init_declarator
      (identifier)
      (char_literal
        (character))))
  (declaration
    (primitive_type)
    (init_declarator
      (identifier)
      (char_literal
        (character))))
  (declaration
    (type_qualifier)
    (type_identifier)
    (init_declarator
      (pointer_declarator
        (identifier))
      (string_literal
        (string_content))))
  (declaration
    (type_qualifier)
    (primitive_type)
    (init_declarator
      (pointer_declarator
        (identifier))
      (string_literal
        (string_content))))
  (declaration
    (type_qualifier)
    (primitive_type)
    (init_declarator
      (pointer_declarator
        (identifier))
      (string_literal
        (string_content))))
  (declaration
    (type_qualifier)
    (primitive_type)
    (init_declarator
      (pointer_declarator
        (identifier))
      (string_literal
        (string_content)))))

================================
Inline specifiers
================================

inline int zero()
{
    return 0;
}

__inline int one()
{
    return 1;
}

__inline__ int two()
{
    return 2;
}

__forceinline int three()
{
    return 3;
}

---

(translation_unit
  (function_definition
    (storage_class_specifier)
    (primitive_type)
    (function_declarator
      (identifier)
      (parameter_list))
    (compound_statement
      (return_statement
        (number_literal))))
  (function_definition
    (storage_class_specifier)
    (primitive_type)
    (function_declarator
      (identifier)
      (parameter_list))
    (compound_statement
      (return_statement
        (number_literal))))
  (function_definition
    (storage_class_specifier)
    (primitive_type)
    (function_declarator
      (identifier)
      (parameter_list))
    (compound_statement
      (return_statement
        (number_literal))))
  (function_definition
    (storage_class_specifier)
    (primitive_type)
    (function_declarator
      (identifier)
      (parameter_list))
    (compound_statement
      (return_statement
        (number_literal)))))

================================
Alignof specifiers
================================

alignof(int);

__alignof(int);

_Alignof(int);

---

(translation_unit
  (expression_statement
    (alignof_expression
      (type_descriptor
        (primitive_type))))
  (expression_statement
    (alignof_expression
      (type_descriptor
        (primitive_type))))
  (expression_statement
    (alignof_expression
      (type_descriptor
        (primitive_type)))))

