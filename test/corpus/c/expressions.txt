================================================================================
Number literals
================================================================================

double a = {
  0xAC00,
  0.123,
  0b1010001,
  0xabc00ull,
  -0.1f,
  1'000'000.000'001,
  24e-5,
  0.1E1,
  58.,
  4e2,
  123.456e-67,
  .1E4f,
  0x10.1p0,
};

--------------------------------------------------------------------------------

(translation_unit
  (declaration
    (primitive_type)
    (init_declarator
      (identifier)
      (initializer_list
        (number_literal)
        (number_literal)
        (number_literal)
        (number_literal)
        (number_literal)
        (number_literal)
        (number_literal)
        (number_literal)
        (number_literal)
        (number_literal)
        (number_literal)
        (number_literal)
        (number_literal)))))

================================================================================
Identifiers
================================================================================

int main() {
  _abc;
  d_EG123;
}

--------------------------------------------------------------------------------

(translation_unit
  (function_definition
    type: (primitive_type)
    declarator: (function_declarator
      declarator: (identifier)
      parameters: (parameter_list))
    body: (compound_statement
      (expression_statement
        expression: (identifier))
      (expression_statement
        expression: (identifier)))))

================================================================================
Unicode Identifiers
================================================================================

int main() {
  µs;
  blah_accenté;
}

--------------------------------------------------------------------------------

(translation_unit
  (function_definition
    type: (primitive_type)
    declarator: (function_declarator
      declarator: (identifier)
      parameters: (parameter_list))
    body: (compound_statement
      (expression_statement
        expression: (identifier))
      (expression_statement
        expression: (identifier)))))

================================================================================
Common constants
================================================================================

int main() {
  true;
  false;
  NULL;

  // regression test - identifiers starting w/ these strings should tokenize correctly.
  true_value;
  false_value;
  NULL_value;
}

--------------------------------------------------------------------------------

(translation_unit
  (function_definition
    type: (primitive_type)
    declarator: (function_declarator
      declarator: (identifier)
      parameters: (parameter_list))
    body: (compound_statement
      (expression_statement
        expression: (true))
      (expression_statement
        expression: (false))
      (expression_statement
        expression: (null))
      (comment)
      (expression_statement
        expression: (identifier))
      (expression_statement
        expression: (identifier))
      (expression_statement
        expression: (identifier)))))

================================================================================
Function calls
================================================================================

int main() {
  printf("hi! %d\n", x);
  __assert_fail("some_error_message", 115, __extension__ __func__);
}

--------------------------------------------------------------------------------

(translation_unit
  (function_definition
    type: (primitive_type)
    declarator: (function_declarator
      declarator: (identifier)
      parameters: (parameter_list))
    body: (compound_statement
      (expression_statement
        expression: (call_expression
          function: (identifier)
          arguments: (argument_list
            argument: (string_literal
              (string_content)
              (escape_sequence))
            argument: (identifier))))
      (expression_statement
        expression: (call_expression
          function: (identifier)
          arguments: (argument_list
            argument: (string_literal
              (string_content))
            argument: (number_literal)
            argument: (identifier)))))))

================================================================================
GNU inline assembly
================================================================================

asm volatile (
    "mov r0, %0\n"
    "mov r1, %[y]\n"
    "add r2, r0, r1\n"
    "mov %1, r2\n"
    :     "r"  (z)
    :     "=r" (x),
      [y] "=r" ((uintptr_t) y)
    : "r2");

int frob(int x)
{
  int y;
  asm goto ("frob %%r5, %1; jc %l[error]; mov (%2), %%r5"
            : /* No outputs. */
            : "r"(x), "r"(&y)
            : "r5", "memory"
            : error);
  return y;
error:
  return -1;
}

--------------------------------------------------------------------------------

(translation_unit
  (expression_statement
    expression: (gnu_asm_expression
      (gnu_asm_qualifier)
      assembly_code: (concatenated_string
        (string_literal
          (string_content)
          (escape_sequence))
        (string_literal
          (string_content)
          (escape_sequence))
        (string_literal
          (string_content)
          (escape_sequence))
        (string_literal
          (string_content)
          (escape_sequence)))
      output_operands: (gnu_asm_output_operand_list
        operand: (gnu_asm_output_operand
          constraint: (string_literal
            (string_content))
          value: (identifier)))
      input_operands: (gnu_asm_input_operand_list
        operand: (gnu_asm_input_operand
          constraint: (string_literal
            (string_content))
          value: (identifier))
        operand: (gnu_asm_input_operand
          symbol: (identifier)
          constraint: (string_literal
            (string_content))
          value: (cast_expression
            type: (type_descriptor
              type: (primitive_type))
            value: (identifier))))
      clobbers: (gnu_asm_clobber_list
        register: (string_literal
         (string_content)))))
 (function_definition
   type: (primitive_type)
   declarator: (function_declarator
     declarator: (identifier)
     parameters: (parameter_list
       (parameter_declaration
         type: (primitive_type)
         declarator: (identifier))))
   body: (compound_statement
     (declaration
       type: (primitive_type)
       declarator: (identifier))
     (expression_statement
       expression: (gnu_asm_expression
         (gnu_asm_qualifier)
         assembly_code: (string_literal
           (string_content))
         output_operands: (gnu_asm_output_operand_list)
         (comment)
         input_operands: (gnu_asm_input_operand_list
           operand: (gnu_asm_input_operand
             constraint: (string_literal
               (string_content))
             value: (identifier))
           operand: (gnu_asm_input_operand
             constraint: (string_literal
               (string_content))
             value: (pointer_expression
               argument: (identifier))))
         clobbers: (gnu_asm_clobber_list
           register: (string_literal
             (string_content))
           register: (string_literal
             (string_content)))
         goto_labels: (gnu_asm_goto_list
           label: (identifier))))
     (return_statement
       expression: (identifier))
     (labeled_statement
       label: (statement_identifier)
       (return_statement
         expression: (number_literal))))))

================================================================================
Function call with compound statement
================================================================================

#define TAKES_BLOCK(x, block) for (i = 0; i < x; i++) block

int main(void) {
  {
    int x = 0;
  }
  TAKES_BLOCK(10, {
    // Doesn't matter what I put in here
  });
}

--------------------------------------------------------------------------------

(translation_unit
  (preproc_function_def
    name: (identifier)
    parameters: (preproc_params
      (identifier)
      (identifier))
    value: (preproc_arg))
  (function_definition
    type: (primitive_type)
    declarator: (function_declarator
      declarator: (identifier)
      parameters: (parameter_list
        (parameter_declaration
          type: (primitive_type))))
    body: (compound_statement
      (compound_statement
        (declaration
          type: (primitive_type)
          declarator: (init_declarator
            declarator: (identifier)
            value: (number_literal))))
      (expression_statement
        expression: (call_expression
          function: (identifier)
          arguments: (argument_list
            argument: (number_literal)
            (initializer_list
              (comment))))))))

================================================================================
String literals
================================================================================

int main() {
  "a";
  "b" "c" "d";
  e "f" g;
  "\"hi\"";
  L"bonjour";
  u"guten morgen";
  U"buenos dias";
  u8"buongiorno";
}

--------------------------------------------------------------------------------

(translation_unit
  (function_definition
    type: (primitive_type)
    declarator: (function_declarator
      declarator: (identifier)
      parameters: (parameter_list))
    body: (compound_statement
      (expression_statement
        expression: (string_literal
          (string_content)))
      (expression_statement
        expression: (concatenated_string
          (string_literal
            (string_content))
          (string_literal
            (string_content))
          (string_literal
            (string_content))))
      (expression_statement
        expression: (concatenated_string
          (identifier)
          (string_literal
            (string_content))
          (identifier)))
      (expression_statement
        expression: (string_literal
          (escape_sequence)
          (string_content)
          (escape_sequence)))
      (expression_statement
        expression: (string_literal
          (string_content)))
      (expression_statement
        expression: (string_literal
          (string_content)))
      (expression_statement
        expression: (string_literal
          (string_content)))
      (expression_statement
        expression: (string_literal
          (string_content))))))

================================================================================
Character literals
================================================================================

int main() {
  'a';
  '\0';
  '\t';
  '\'';
  L'b';
  u'c';
  U'\xa1';
  u8'\x1A';
}

--------------------------------------------------------------------------------

(translation_unit
  (function_definition
    type: (primitive_type)
    declarator: (function_declarator
      declarator: (identifier)
      parameters: (parameter_list))
    body: (compound_statement
      (expression_statement
        expression: (char_literal
          (character)))
      (expression_statement
        expression: (char_literal
          (escape_sequence)))
      (expression_statement
        expression: (char_literal
          (escape_sequence)))
      (expression_statement
        expression: (char_literal
          (escape_sequence)))
      (expression_statement
        expression: (char_literal
          (character)))
      (expression_statement
        expression: (char_literal
          (character)))
      (expression_statement
        expression: (char_literal
          (escape_sequence)))
      (expression_statement
        expression: (char_literal
          (escape_sequence))))))

================================================================================
Field access
================================================================================

int main() {
  s.data1;
  p->data2;
  q[data3];
}

--------------------------------------------------------------------------------

(translation_unit
  (function_definition
    type: (primitive_type)
    declarator: (function_declarator
      declarator: (identifier)
      parameters: (parameter_list))
    body: (compound_statement
      (expression_statement
        expression: (field_expression
          argument: (identifier)
          field: (field_identifier)))
      (expression_statement
        expression: (field_expression
          argument: (identifier)
          field: (field_identifier)))
      (expression_statement
        expression: (subscript_expression
          argument: (identifier)
          indices: (subscript_argument_list
            argument: (identifier)))))))

================================================================================
Boolean operators
================================================================================

int main() {
  !x || !y && !z;
}

--------------------------------------------------------------------------------

(translation_unit
  (function_definition
    type: (primitive_type)
    declarator: (function_declarator
      declarator: (identifier)
      parameters: (parameter_list))
    body: (compound_statement
      (expression_statement
        expression: (binary_expression
          left: (unary_expression
            argument: (identifier))
          right: (binary_expression
            left: (unary_expression
              argument: (identifier))
            right: (unary_expression
              argument: (identifier))))))))

================================================================================
Math operators
================================================================================

int main() {
  -a / b + c * -d;
  a++ - ++b + c-- + --d;
  ++L;
  a << b | c ^ d >> a;
  }

--------------------------------------------------------------------------------

(translation_unit
  (function_definition
    type: (primitive_type)
    declarator: (function_declarator
      declarator: (identifier)
      parameters: (parameter_list))
    body: (compound_statement
      (expression_statement
        expression: (binary_expression
          left: (binary_expression
            left: (unary_expression
              argument: (identifier))
            right: (identifier))
          right: (binary_expression
            left: (identifier)
            right: (unary_expression
              argument: (identifier)))))
      (expression_statement
        expression: (binary_expression
          left: (binary_expression
            left: (binary_expression
              left: (update_expression
                argument: (identifier))
              right: (update_expression
                argument: (identifier)))
            right: (update_expression
              argument: (identifier)))
          right: (update_expression
            argument: (identifier))))
      (expression_statement
        expression: (update_expression
          argument: (identifier)))
      (expression_statement
        expression: (binary_expression
          left: (binary_expression
            left: (identifier)
            right: (identifier))
          right: (binary_expression
            left: (identifier)
            right: (binary_expression
              left: (identifier)
              right: (identifier))))))))

================================================================================
The comma operator
================================================================================

int main() {
  i--, j--;
  (i--, j--);
}

--------------------------------------------------------------------------------

(translation_unit
  (function_definition
    (primitive_type)
    (function_declarator
      (identifier)
      (parameter_list))
    (compound_statement
      (expression_statement
        (comma_expression
          (update_expression
            (identifier))
          (update_expression
            (identifier))))
      (expression_statement
        (parenthesized_expression
          (comma_expression
            (update_expression
              (identifier))
            (update_expression
              (identifier))))))))

================================================================================
Assignments
================================================================================

int main() {
  static int a = 1;
  b = *c = 2;
  d.e = 3;
  f->g = 4;
  h[i] = j;
  k += l;
  m -= o;
  n *= p;
  q /= r;
  *s++ = 1;
  (*t) = 1;
  a *= ((b!=c) ? d : e);
  a %= b;
  a &= ~b;
  a ^= b<=c;
  a ^= b>=c;
  a |= b==c;
  a >>= b;
  a <<= b;
}

--------------------------------------------------------------------------------

(translation_unit
  (function_definition
    type: (primitive_type)
    declarator: (function_declarator
      declarator: (identifier)
      parameters: (parameter_list))
    body: (compound_statement
      (declaration
        (storage_class_specifier)
        type: (primitive_type)
        declarator: (init_declarator
          declarator: (identifier)
          value: (number_literal)))
      (expression_statement
        expression: (assignment_expression
          left: (identifier)
          right: (assignment_expression
            left: (pointer_expression
              argument: (identifier))
            right: (number_literal))))
      (expression_statement
        expression: (assignment_expression
          left: (field_expression
            argument: (identifier)
            field: (field_identifier))
          right: (number_literal)))
      (expression_statement
        expression: (assignment_expression
          left: (field_expression
            argument: (identifier)
            field: (field_identifier))
          right: (number_literal)))
      (expression_statement
        expression: (assignment_expression
          left: (subscript_expression
            argument: (identifier)
            indices: (subscript_argument_list
              argument: (identifier)))
          right: (identifier)))
      (expression_statement
        expression: (assignment_expression
          left: (identifier)
          right: (identifier)))
      (expression_statement
        expression: (assignment_expression
          left: (identifier)
          right: (identifier)))
      (expression_statement
        expression: (assignment_expression
          left: (identifier)
          right: (identifier)))
      (expression_statement
        expression: (assignment_expression
          left: (identifier)
          right: (identifier)))
      (expression_statement
        expression: (assignment_expression
          left: (pointer_expression
            argument: (update_expression
              argument: (identifier)))
          right: (number_literal)))
      (expression_statement
        expression: (assignment_expression
          left: (parenthesized_expression
            expression: (pointer_expression
              argument: (identifier)))
          right: (number_literal)))
      (expression_statement
        expression: (assignment_expression
          left: (identifier)
          right: (parenthesized_expression
            expression: (conditional_expression
              condition: (parenthesized_expression
                expression: (binary_expression
                  left: (identifier)
                  right: (identifier)))
              consequence: (identifier)
              alternative: (identifier)))))
      (expression_statement
        expression: (assignment_expression
          left: (identifier)
          right: (identifier)))
      (expression_statement
        expression: (assignment_expression
          left: (identifier)
          right: (unary_expression
            argument: (identifier))))
      (expression_statement
        expression: (assignment_expression
          left: (identifier)
          right: (binary_expression
            left: (identifier)
            right: (identifier))))
      (expression_statement
        expression: (assignment_expression
          left: (identifier)
          right: (binary_expression
            left: (identifier)
            right: (identifier))))
      (expression_statement
        expression: (assignment_expression
          left: (identifier)
          right: (binary_expression
            left: (identifier)
            right: (identifier))))
      (expression_statement
        expression: (assignment_expression
          left: (identifier)
          right: (identifier)))
      (expression_statement
        expression: (assignment_expression
          left: (identifier)
          right: (identifier))))))

================================================================================
Pointer operations
================================================================================

int main() {
  doSomething(&x, *x);
}

--------------------------------------------------------------------------------

(translation_unit
  (function_definition
    type: (primitive_type)
    declarator: (function_declarator
      declarator: (identifier)
      parameters: (parameter_list))
    body: (compound_statement
      (expression_statement
        expression: (call_expression
          function: (identifier)
          arguments: (argument_list
            argument: (pointer_expression
              argument: (identifier))
            argument: (pointer_expression
              argument: (identifier))))))))

================================================================================
Type-casts
================================================================================

int main() {
  x = (const SomeType *)thing;
}

--------------------------------------------------------------------------------

(translation_unit
  (function_definition
    type: (primitive_type)
    declarator: (function_declarator
      declarator: (identifier)
      parameters: (parameter_list))
    body: (compound_statement
      (expression_statement
        expression: (assignment_expression
          left: (identifier)
          right: (cast_expression
            type: (type_descriptor
              (type_qualifier)
              type: (type_identifier)
              declarator: (abstract_pointer_declarator))
            value: (identifier)))))))

================================================================================
Sizeof expressions
================================================================================

int main() {
  sizeof x.a;
  sizeof(x.a);
  sizeof(const char **);
  sizeof(char * ());
}

--------------------------------------------------------------------------------

(translation_unit
  (function_definition
    (primitive_type)
    (function_declarator
      (identifier)
      (parameter_list))
    (compound_statement
      (expression_statement
        (sizeof_expression
          (field_expression
            (identifier)
            (field_identifier))))
      (expression_statement
        (sizeof_expression
          (parenthesized_expression
            (field_expression
              (identifier)
              (field_identifier)))))
      (expression_statement
        (sizeof_expression
          (type_descriptor
            (type_qualifier)
            (primitive_type)
            (abstract_pointer_declarator
              (abstract_pointer_declarator)))))
      (expression_statement
        (sizeof_expression
          (type_descriptor
            (primitive_type)
            (abstract_pointer_declarator
              (abstract_function_declarator
                (parameter_list)))))))))

================================================================================
Alignof expressions
================================================================================

typedef struct {
    long long __clang_max_align_nonce1
        __attribute__((__aligned__(__alignof__(long long))));
    long double __clang_max_align_nonce2
        __attribute__((__aligned__(__alignof__(long double))));
} max_align_t;

--------------------------------------------------------------------------------

(translation_unit
  (type_definition
    type: (struct_specifier
      body: (field_declaration_list
        (field_declaration
          type: (sized_type_specifier)
          declarator: (field_identifier)
          (attribute_specifier
            (argument_list
              argument: (call_expression
                function: (identifier)
                arguments: (argument_list
                  argument: (alignof_expression
                    type: (type_descriptor
                      type: (sized_type_specifier))))))))
        (field_declaration
          type: (sized_type_specifier
            type: (primitive_type))
          declarator: (field_identifier)
          (attribute_specifier
            (argument_list
              argument: (call_expression
                function: (identifier)
                arguments: (argument_list
                  argument: (alignof_expression
                    type: (type_descriptor
                      type: (sized_type_specifier
                        type: (primitive_type)))))))))))
    declarator: (primitive_type)))

================================================================================
Offsetof expressions
================================================================================

int main() {
  offsetof( struct x, a );
  offsetof( x, a );
}

--------------------------------------------------------------------------------

(translation_unit
  (function_definition
    (primitive_type)
    (function_declarator
      (identifier)
      (parameter_list))
    (compound_statement
      (expression_statement
        (offsetof_expression
          (type_descriptor
            (struct_specifier
              (type_identifier)))
          (field_identifier)))
      (expression_statement
        (offsetof_expression
          (type_descriptor
            (type_identifier))
          (field_identifier))))))

================================================================================
Compound literals
================================================================================

int main() {
  x = (SomeType) {
    .f1.f2[f3] = 5,
    .f4 = {}
  };
  y = (struct SomeStruct) {
    7,
    8
  };
  z = (char const []) {'a', 'b'};
}

--------------------------------------------------------------------------------

(translation_unit
  (function_definition
    type: (primitive_type)
    declarator: (function_declarator
      declarator: (identifier)
      parameters: (parameter_list))
    body: (compound_statement
      (expression_statement
        expression: (assignment_expression
          left: (identifier)
          right: (compound_literal_expression
            type: (type_descriptor
              type: (type_identifier))
            value: (initializer_list
              (initializer_pair
                designator: (field_designator
                  (field_identifier))
                designator: (field_designator
                  (field_identifier))
                designator: (subscript_designator
                  (identifier))
                value: (number_literal))
              (initializer_pair
                designator: (field_designator
                  (field_identifier))
                value: (initializer_list))))))
      (expression_statement
        expression: (assignment_expression
          left: (identifier)
          right: (compound_literal_expression
            type: (type_descriptor
              type: (struct_specifier
                name: (type_identifier)))
            value: (initializer_list
              (number_literal)
              (number_literal)))))
      (expression_statement
        expression: (assignment_expression
          left: (identifier)
          right: (compound_literal_expression
            type: (type_descriptor
              type: (primitive_type)
              (type_qualifier)
              declarator: (abstract_array_declarator))
            value: (initializer_list
              (char_literal
                (character))
              (char_literal
                (character)))))))))

================================================================================
Compound literals with trailing commas
================================================================================

int main() {
  y = (struct SomeStruct) { 7, 8, };
}

--------------------------------------------------------------------------------

(translation_unit
  (function_definition
    type: (primitive_type)
    declarator: (function_declarator
      declarator: (identifier)
      parameters: (parameter_list))
    body: (compound_statement
      (expression_statement
        expression: (assignment_expression
          left: (identifier)
          right: (compound_literal_expression
            type: (type_descriptor
              type: (struct_specifier
                name: (type_identifier)))
            value: (initializer_list
              (number_literal)
              (number_literal))))))))

================================================================================
Comments with escaped newlines
================================================================================

// one \
   two

--------------------------------------------------------------------------------

(translation_unit
  (comment))

================================================================================
Comments with escaped chars and newlines
================================================================================

// one \a \b \
   two
// one \c \d
--------------------------------------------------------------------------------

(translation_unit
  (comment)
  (comment))

================================================================================
Generic Expressions
================================================================================

int main(int argc, char **argv) {
  int    a = 10;
  float  b = 3.14;
  double c = 2.71828;
  char   d = 'A';

  a = _Generic(d, int: 5, float: 0, char: 100);
  b = _Generic(a, void *: 0, int: 4.0, float: 3.14, double: 2.71828, char: 1.0);
    c = _Generic(b, void *: 0, int: 4.0, float: 3.14, double: 2.71828, char: 1.0);
    d = _Generic(c, void *: '\0', int: '0', float: '3', double: '2', char: '1');

  _Generic(a, int: printf("a is an int\n"), float: printf("a is a float\n"), double: printf("a is a double\n"), char: printf("a is a char\n"));
  _Generic(b, int: printf("b is an int\n"), float: printf("b is a float\n"), double: printf("b is a double\n"), char: printf("b is a char\n"));
  _Generic(c, int: printf("c is an int\n"), float: printf("c is a float\n"), double: printf("c is a double\n"), char: printf("c is a char\n"));
  _Generic(d, int: printf("d is an int\n"), float: printf("d is a float\n"), double: printf("d is a double\n"), char: printf("d is a char\n"));

  return 0;
}

--------------------------------------------------------------------------------

(translation_unit
  (function_definition
    type: (primitive_type)
    declarator: (function_declarator
      declarator: (identifier)
      parameters: (parameter_list
        (parameter_declaration
          type: (primitive_type)
          declarator: (identifier))
        (parameter_declaration
          type: (primitive_type)
          declarator: (pointer_declarator
            declarator: (pointer_declarator
              declarator: (identifier))))))
    body: (compound_statement
      (declaration
        type: (primitive_type)
        declarator: (init_declarator
          declarator: (identifier)
          value: (number_literal)))
      (declaration
        type: (primitive_type)
        declarator: (init_declarator
          declarator: (identifier)
          value: (number_literal)))
      (declaration
        type: (primitive_type)
        declarator: (init_declarator
          declarator: (identifier)
          value: (number_literal)))
      (declaration
        type: (primitive_type)
        declarator: (init_declarator
          declarator: (identifier)
          value: (char_literal
            (character))))
      (expression_statement
        expression: (assignment_expression
          left: (identifier)
          right: (generic_expression
            (identifier)
            (type_descriptor
              type: (primitive_type))
            (number_literal)
            (type_descriptor
              type: (primitive_type))
            (number_literal)
            (type_descriptor
              type: (primitive_type))
            (number_literal))))
      (expression_statement
        expression: (assignment_expression
          left: (identifier)
          right: (generic_expression
            (identifier)
            (type_descriptor
              type: (primitive_type)
              declarator: (abstract_pointer_declarator))
            (number_literal)
            (type_descriptor
              type: (primitive_type))
            (number_literal)
            (type_descriptor
              type: (primitive_type))
            (number_literal)
            (type_descriptor
              type: (primitive_type))
            (number_literal)
            (type_descriptor
              type: (primitive_type))
            (number_literal))))
      (expression_statement
        expression: (assignment_expression
          left: (identifier)
          right: (generic_expression
            (identifier)
            (type_descriptor
              type: (primitive_type)
              declarator: (abstract_pointer_declarator))
            (number_literal)
            (type_descriptor
              type: (primitive_type))
            (number_literal)
            (type_descriptor
              type: (primitive_type))
            (number_literal)
            (type_descriptor
              type: (primitive_type))
            (number_literal)
            (type_descriptor
              type: (primitive_type))
            (number_literal))))
      (expression_statement
        expression: (assignment_expression
          left: (identifier)
          right: (generic_expression
            (identifier)
            (type_descriptor
              type: (primitive_type)
              declarator: (abstract_pointer_declarator))
            (char_literal
              (escape_sequence))
            (type_descriptor
              type: (primitive_type))
            (char_literal
              (character))
            (type_descriptor
              type: (primitive_type))
            (char_literal
              (character))
            (type_descriptor
              type: (primitive_type))
            (char_literal
              (character))
            (type_descriptor
              type: (primitive_type))
            (char_literal
              (character)))))
      (expression_statement
        expression: (generic_expression
          (identifier)
          (type_descriptor
            type: (primitive_type))
          (call_expression
            function: (identifier)
            arguments: (argument_list
              argument: (string_literal
                (string_content)
                (escape_sequence))))
          (type_descriptor
            type: (primitive_type))
          (call_expression
            function: (identifier)
            arguments: (argument_list
              argument: (string_literal
                (string_content)
                (escape_sequence))))
          (type_descriptor
            type: (primitive_type))
          (call_expression
            function: (identifier)
            arguments: (argument_list
              argument: (string_literal
                (string_content)
                (escape_sequence))))
          (type_descriptor
            type: (primitive_type))
          (call_expression
            function: (identifier)
            arguments: (argument_list
              argument: (string_literal
                (string_content)
                (escape_sequence))))))
      (expression_statement
        expression: (generic_expression
          (identifier)
          (type_descriptor
            type: (primitive_type))
          (call_expression
            function: (identifier)
            arguments: (argument_list
              argument: (string_literal
                (string_content)
                (escape_sequence))))
          (type_descriptor
            type: (primitive_type))
          (call_expression
            function: (identifier)
            arguments: (argument_list
              argument: (string_literal
                (string_content)
                (escape_sequence))))
          (type_descriptor
            type: (primitive_type))
          (call_expression
            function: (identifier)
            arguments: (argument_list
              argument: (string_literal
                (string_content)
                (escape_sequence))))
          (type_descriptor
            type: (primitive_type))
          (call_expression
            function: (identifier)
            arguments: (argument_list
              argument: (string_literal
                (string_content)
                (escape_sequence))))))
      (expression_statement
        expression: (generic_expression
          (identifier)
          (type_descriptor
            type: (primitive_type))
          (call_expression
            function: (identifier)
            arguments: (argument_list
              argument: (string_literal
                (string_content)
                (escape_sequence))))
          (type_descriptor
            type: (primitive_type))
          (call_expression
            function: (identifier)
            arguments: (argument_list
              argument: (string_literal
                (string_content)
                (escape_sequence))))
          (type_descriptor
            type: (primitive_type))
          (call_expression
            function: (identifier)
            arguments: (argument_list
              argument: (string_literal
                (string_content)
                (escape_sequence))))
          (type_descriptor
            type: (primitive_type))
          (call_expression
            function: (identifier)
            arguments: (argument_list
              argument: (string_literal
                (string_content)
                (escape_sequence))))))
      (expression_statement
        expression: (generic_expression
          (identifier)
          (type_descriptor
            type: (primitive_type))
          (call_expression
            function: (identifier)
            arguments: (argument_list
              argument: (string_literal
                (string_content)
                (escape_sequence))))
          (type_descriptor
            type: (primitive_type))
          (call_expression
            function: (identifier)
            arguments: (argument_list
              argument: (string_literal
                (string_content)
                (escape_sequence))))
          (type_descriptor
            type: (primitive_type))
          (call_expression
            function: (identifier)
            arguments: (argument_list
              argument: (string_literal
                (string_content)
                (escape_sequence))))
          (type_descriptor
            type: (primitive_type))
          (call_expression
            function: (identifier)
            arguments: (argument_list
              argument: (string_literal
                (string_content)
                (escape_sequence))))))
      (return_statement
        expression: (number_literal)))))

================================================================================
Noreturn Type Qualifier
================================================================================

_Noreturn void kill(void) {
  printf("Killing the program\n");
  exit(0);
}

--------------------------------------------------------------------------------

(translation_unit
  (function_definition
    (type_qualifier)
    type: (primitive_type)
    declarator: (function_declarator
      declarator: (identifier)
      parameters: (parameter_list
        (parameter_declaration
          type: (primitive_type))))
    body: (compound_statement
      (expression_statement
        expression: (call_expression
          function: (identifier)
          arguments: (argument_list
            argument: (string_literal
              (string_content)
              (escape_sequence)))))
      (expression_statement
        expression: (call_expression
          function: (identifier)
          arguments: (argument_list
            argument: (number_literal)))))))

================================================================================
Restrict Type Qualifier
================================================================================

void fn (int *__restrict__ rptr) {
  int *ptr = rptr;
  *ptr = 0;
}

--------------------------------------------------------------------------------

(translation_unit
  (function_definition
    type: (primitive_type)
    declarator: (function_declarator
      declarator: (identifier)
      parameters: (parameter_list
        (parameter_declaration
          type: (primitive_type)
          declarator: (pointer_declarator
            (type_qualifier)
            declarator: (identifier)))))
    body: (compound_statement
      (declaration
        type: (primitive_type)
        declarator: (init_declarator
          declarator: (pointer_declarator
            declarator: (identifier))
          value: (identifier)))
      (expression_statement
        expression: (assignment_expression
          left: (pointer_expression
            argument: (identifier))
          right: (number_literal))))))
